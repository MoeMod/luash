render_api_s = {
	RenderGetParm = 1, -- int		(*)( int parm, int arg );	// generic
	GetDetailScaleForTexture = 2, -- void		(*)( int texture, float *xScale, float *yScale );
	GetExtraParmsForTexture = 3, -- void		(*)( int texture, byte *red, byte *green, byte *blue, byte *alpha );
	GetLightStyle = 4, -- lightstyle_t*	(*)( int number ); 
	GetDynamicLight = 5, -- dlight_t*		(*)( int number );
	GetEntityLight = 6, -- dlight_t*		(*)( int number );
	TextureToTexGamma = 7, -- byte		(*)( byte color );	// software gamma support
	GetBeamChains = 8, -- void		(*)( BEAM ***active_beams, BEAM ***free_beams, particle_t ***free_trails );
	R_SetCurrentEntity = 9, -- void		(*)( struct cl_entity_s *ent ); // tell engine about both currententity and currentmodel
	R_SetCurrentModel = 10, -- void		(*)( struct model_s *mod );	// change currentmodel but leave currententity unchanged
	GL_SetWorldviewProjectionMatrix = 11, -- void		(*)( const float *glmatrix ); // update viewprojection matrix (tracers uses it)
	R_StoreEfrags = 12, -- void		(*)( struct efrag_s **ppefrag, int framecount );// store efrags for static entities
	GL_FindTexture = 13, -- int		(*)( const char *name );
	GL_TextureName = 14, -- const char*	(*)( unsigned int texnum );
	GL_TextureData = 15, -- const byte*	(*)( unsigned int texnum ); // may be NULL
	GL_LoadTexture = 16, -- int		(*)( const char *name, const byte *buf, size_t size, int flags );
	GL_CreateTexture = 17, -- int		(*)( const char *name, int width, int height, const void *buffer, int flags ); 
	GL_SetTextureType = 18, -- void		(*)( unsigned int texnum, unsigned int type );
	GL_TextureCacheFrame = 19, -- void		(*)( unsigned int texnum );
	GL_FreeTexture = 20, -- void		(*)( unsigned int texnum );
	DrawSingleDecal = 21, -- void		(*)( struct decal_s *pDecal, struct msurface_s *fa );
	R_DecalSetupVerts = 22, -- float		*(*)( struct decal_s *pDecal, struct msurface_s *surf, int texture, int *outCount );
	R_EntityRemoveDecals = 23, -- void		(*)( struct model_s *mod ); // remove all the decals from specified entity (BSP only)
	AVI_LoadVideo = 24, -- void		*(*)( const char *filename, int ignore_hwgamma );
	AVI_GetVideoInfo = 25, -- int		(*)( void *Avi, long *xres, long *yres, float *duration );
	AVI_GetVideoFrameNumber = 26, -- long		(*)( void *Avi, float time );
	AVI_GetVideoFrame = 27, -- byte		*(*)( void *Avi, long frame );
	AVI_UploadRawFrame = 28, -- void		(*)( int texture, int cols, int rows, int width, int height, const byte *data );
	AVI_FreeVideo = 29, -- void		(*)( void *Avi );
	AVI_IsActive = 30, -- int		(*)( void *Avi );
	GL_Bind = 31, -- void		(*)( int tmu, unsigned int texnum );
	GL_SelectTexture = 32, -- void		(*)( int tmu );
	GL_LoadTextureMatrix = 33, -- void		(*)( const float *glmatrix );
	GL_CleanUpTextureUnits = 34, -- void		(*)( void );
	GL_CleanUpTextureUnits = 35, -- void		(*)( int last );	// pass 0 for clear all the texture units
	GL_TexGen = 36, -- void		(*)( unsigned int coord, unsigned int mode );
	GL_TextureTarget = 37, -- void		(*)( unsigned int target ); // change texture unit mode without bind texture
	GL_TexCoordArrayMode = 38, -- void		(*)( unsigned int texmode );
	GL_Reserved0 = 39, -- void		(*)( void );	// for potential interface expansion without broken compatibility
	GL_Reserved1 = 40, -- void		(*)( void );
	GL_Reserved2 = 41, -- void		(*)( void );
	GL_Scissor = 42, -- void		(*)(int enable, int x, int y, int width, int height);
	GL_DrawParticles = 43, -- void		(*)( const float *vieworg, const float *fwd, const float *rt, const float *up, unsigned int clipFlags );
	EnvShot = 44, -- void		(*)( const float *vieworg, const char *name, qboolean skyshot, int shotsize ); // creates a cubemap or skybox into gfx\env folder
	COM_CompareFileTime = 45, -- int		(*)( const char *filename1, const char *filename2, int *iCompare );
	Host_Error = 46, -- void		(*)( const char *error, ... ); // cause Host Error
	SPR_LoadExt = 47, -- int		(*)( const char *szPicName, unsigned int texFlags ); // extended version of SPR_Load
	TessPolygon = 48, -- void		(*)( struct msurface_s *surf, struct model_s *mod, float tessSize );
	StudioGetTexture = 49, -- struct mstudiotex_s *( * )( struct cl_entity_s *e );
	GetOverviewParms = 50, -- const struct ref_overview_s *( * )( void );
	S_FadeMusicVolume = 51, -- void		(*)( float fadePercent );	// fade background track (0-100 percents)
	SetRandomSeed = 52, -- void		(*)( long lSeed );		// set custom seed for RANDOM_FLOAT\RANDOM_LONG for predictable random
	pfnMemAlloc = 53, -- void		*(*)( size_t cb, const char *filename, const int fileline );
	pfnMemFree = 54, -- void		(*)( void *mem, const char *filename, const int fileline );
	pfnGetFilesList = 55, -- char		**(*)( const char *pattern, int *numFiles, int gamedironly );
}
render_api_t = render_api_s
return render_api_s